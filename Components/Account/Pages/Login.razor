@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using AcademicYearCalendar.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>تسجيل الدخول</PageTitle>

<h1>تسجيل الدخول</h1>
<FluentGrid>
    <FluentGridItem xs="8" sm="4">
        <StatusMessage Message="@errorMessage" />
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />            
            <hr />
            <FluentValidationSummary class="text-danger" role="alert" />
            <FluentStack Orientation="Orientation.Vertical">
                <FluentTextField Name="Input.UserName" @bind-Value="Input.UserName" AutoComplete="username" Required="true" Placeholder="" Label="اسم المستخدم" Style="width: 100%" />
                <FluentValidationMessage For="() => Input.UserName" class="text-danger" />
                <FluentTextField type="password" Name="Input.Password" @bind-Value="Input.Password" AutoComplete="current-password" Required="true" Placeholder="password" Label="كلمة المرور" Style="width: 100%" />
                <FluentValidationMessage For="() => Input.Password" class="text-danger" />
                <FluentCheckbox Name="Input.RememberMe" @bind-Value="Input.RememberMe" Label="تذكرني" />
                <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="width: 100%">دخول</FluentButton>
            </FluentStack>
        </EditForm>
    </FluentGridItem>
    
</FluentGrid>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.UserName, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "حدث خطأ اثناء محاولة الدخول - الرجاء التحقق من البيانات واعادة المحاولة";
        }
    }

    private sealed class InputModel
    {
        [Required]
        public string UserName { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
