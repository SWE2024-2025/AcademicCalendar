@using Microsoft.EntityFrameworkCore
@using AcademicYearCalendar.Data
@using AcademicYearCalendar.Components.Account
@using Microsoft.AspNetCore.Identity;
@inject AppIdentityDbContext AppIdentityDbContext
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IToastService ToastService
@rendermode InteractiveServer

<h3>تعديل كلمة المرور</h3>


<FluentGrid>
    <FluentGridItem xs="12" sm="6">
        <EditForm Model="User" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post" novalidate>
            <DataAnnotationsValidator />
            <FluentValidationSummary class="text-danger" role="alert" />
            <FluentTextField Name="User.UserName" @bind-Value="User.FullName" Required="true" ReadOnly="true" Label="اسم المستخدم" Style="width: 100%" />
            <FluentValidationMessage For="() => User.FullName" class="text-danger" />
            <FluentTextField type="password" Name="password" @bind-Value="password" Required="true" Placeholder="ادخل كلمة المرور" Label="كلمة المرور" Style="width: 100%" />
            <FluentValidationMessage For="() => password" class="text-danger" />

            <div style="padding:10px"></div>
            <div style="display:flex">
                <FluentSpacer />
                <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size16.Save())" Style="width: 25%;">حفظ</FluentButton>
                <FluentSpacer />
                <FluentButton Type="ButtonType.Button" @onclick="ExitOnClick" Appearance="Appearance.Accent" IconStart="@(new MyIcons.Regular.Size16.Cancel())" Style="width: 25%;">رجوع</FluentButton>
                <FluentSpacer />
            </div>
        </EditForm>
    </FluentGridItem>
</FluentGrid>


@code {

    [Parameter]
    public UserWithRolesDto User { get; set; }

    [Parameter]
    public EventCallback OnDone { get; set; }

    private string password;

    protected override void OnInitialized()
    {

    }

    async Task ExitOnClick()
    {
        ToastService.ShowInfo("لم يتم تعديل اي بيانات", 3000);
        await OnDone.InvokeAsync();
    }

    private async Task OnValidSubmitAsync()
    {
        var appUser = await UserManager.FindByIdAsync(User.UserId);
        if (appUser != null)
        {
            // Remove existing password (only if one is set)
            var hasPassword = await UserManager.HasPasswordAsync(appUser);
            if (hasPassword)
            {
                var removeResult = await UserManager.RemovePasswordAsync(appUser);
            }

            // Set new password
            var result = await UserManager.AddPasswordAsync(appUser, password);
            if (result.Succeeded)
            {
                ToastService.ShowSuccess("تم حفظ البيانات بنجاح", 3000);
            }
            else
            {
                ToastService.ShowError("حدث خطأ اثناء تحديث البيانات" + string.Join(",", result.Errors.Select(e => e.Description)), 9000);
                return;
            }
        }
        else
        {
            ToastService.ShowError("حدث خطأ اثناء تحديث البيانات", 9000);
        }
        await OnDone.InvokeAsync();
    }
}
