@using Microsoft.EntityFrameworkCore
@using AcademicYearCalendar.Data
@inject AppDbContext AppDbContext
@rendermode InteractiveServer
@inject IToastService ToastService
@using DevExpress.Blazor
@inject IMessageService MessageService

<h3>اضافة/تعديل  الموعد</h3>

<FluentGrid Spacing="1" AdaptiveRendering="true">
    <FluentGridItem xs="12" sm="6">
        <FluentTextField @bind-Value="@appointmentInfo.Caption" Label="وصف الموعد" Style="width: 100%" />
    </FluentGridItem>
    <FluentGridItem xs="12" sm="6"></FluentGridItem>
    <FluentGridItem xs="12" sm="6">
        <FluentDatePicker Label="تاريخ الموعد" @bind-Value="@appointmentInfo.StartDate" />
        <FluentTimePicker @bind-Value="@appointmentInfo.StartTime" />
        <FluentTimePicker @bind-Value="@appointmentInfo.EndTime" />
    </FluentGridItem>
    <FluentGridItem xs="12" sm="6"></FluentGridItem>
    <FluentGridItem xs="12" sm="6">
        <FluentSelect TOption="string"  Label="تكرار الموعد" Width="200px" @bind-Value="@appointmentInfo.RepeatPeriod">
            <FluentOption Value="0">بدون تكرار</FluentOption>
            <FluentOption Value="1">يومي</FluentOption>
            <FluentOption Value="2">اسبوعي</FluentOption>
            <FluentOption Value="3">شهري</FluentOption>
        </FluentSelect>
    </FluentGridItem>
    <FluentGridItem xs="12" sm="6"> </FluentGridItem>
    <FluentGridItem xs="12" sm="6">
        <div>
            @if (int.Parse(appointmentInfo.RepeatPeriod) > 0)
            {
                <FluentNumberField @bind-Value="@appointmentInfo.RepeatedEvery" Label="تكرار الموعد كل" Style="width:60px" />
                <label>@repeatPeriodText</label>
                @* <FluentLabel Typo="Typography.Subject"> @repeatPeriodText </FluentLabel> *@
            }
        </div>
    </FluentGridItem>
    <FluentGridItem xs="12" sm="6"> </FluentGridItem>
    <FluentGridItem xs="12" sm="6">
        @if (appointmentInfo.RepeatPeriod == "2")
        {
            <FluentSelect TOption="string" Label="يوم" Width="200px" @bind-Value="@appointmentInfo.WeekDay">
                <FluentOption Value="64">السبت</FluentOption>
                <FluentOption Value="1">الاحد</FluentOption>
                <FluentOption Value="2">الاثنين</FluentOption>
                <FluentOption Value="4">الثلاثاء</FluentOption>
                <FluentOption Value="8">الاربعاء</FluentOption>
                <FluentOption Value="16">الخميس</FluentOption>
                <FluentOption Value="32">الجمعة</FluentOption>
            </FluentSelect>
        }
        @if (appointmentInfo.RepeatPeriod == "3")
        {
            <FluentSelect Items="@monthDays" OptionText="p=>p.Text" OptionValue="p=>p.Value" Height="300px" Label="يوم" Width="200px" @bind-Value="@appointmentInfo.MonthDay"></FluentSelect>
        }
    </FluentGridItem>
    <FluentGridItem xs="12" sm="6"> </FluentGridItem>
    <FluentGridItem xs="12" sm="6">
        @if (int.Parse(appointmentInfo.RepeatPeriod) > 0)
        {
            <FluentDatePicker Label="نهاية التكرار" @bind-Value="@appointmentInfo.RecurrenceEndDate" />
        }
    </FluentGridItem>
    <FluentGridItem xs="12" sm="6"> </FluentGridItem>
    <FluentGridItem xs="12" sm="6">
        <FluentAutocomplete Items="@resources" TOption="Resource" OnOptionsSearch="@OnSearch" OptionText="p=>p.Name" OptionValue="p=>p.Id.ToString()" Height="300px" @bind-SelectedOptions="@appointmentInfo.Resources" AutoComplete="off" Label="موارد الموعد" Width="100%" Placeholder="" />
    </FluentGridItem>
    <FluentGridItem xs="12" sm="6"></FluentGridItem>
    <FluentGridItem xs="12" sm="6">
        <div style="display:flex">
            <FluentSpacer />
            <FluentButton Type="ButtonType.Button" @onclick="OnSaveClick" Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size16.Save())" Style="width: 25%;">حفظ</FluentButton>
            <FluentSpacer />
            <FluentButton Type="ButtonType.Button" @onclick="ExitOnClick" Appearance="Appearance.Accent" IconStart="@(new MyIcons.Regular.Size16.Cancel())" Style="width: 25%;">رجوع</FluentButton>
            <FluentSpacer />
        </div>
    </FluentGridItem>
</FluentGrid>


@code {
    [Parameter]
    public Appointment Appointment { get; set; }


    [Parameter]
    public string Status { get; set; }

    [Parameter]
    public EventCallback OnDone { get; set; }

    private AppointmentInfo appointmentInfo { get; set; }  = new AppointmentInfo();

    private List<Resource> resources;

    private string repeatPeriodText
    {
        get
        {
            switch (appointmentInfo.RepeatPeriod)
            {
                case "1":
                    return "يوم";
                    break;
                case "2":
                    return "اسبوع";
                    break;
                case "3":
                    return "شهر";
                    break;
                default:
                    return "";
            }

        }
    }

    List<Option<string>> monthDays
    {
        get

        {
            var days = new List<Option<string>>();
            for(int day = 1; day <= 31; day++)
            {
                days.Add(new Option<string>() { Value = day.ToString(), Text = day.ToString() });
            }
            return days;

        }
    }

    protected override void OnInitialized()
    {
        loadResources();
        if (Status == "Add")
        {
            Appointment = new Appointment();
        }
        if (Status == "Edit")
        {
            appointmentInfo.SetAppointmentInfo(Appointment,resources);
        }
    }

    private void loadResources()
    {
        resources = AppDbContext.Resources.Where(r => r.ParentId != null).ToList();
    }

    private void OnSearch(OptionsSearchEventArgs<Resource> e)
    {
        e.Items = resources.Where(i => i.Name.Contains(e.Text, StringComparison.OrdinalIgnoreCase))
                             .OrderBy(i => i.Name);
    }

    async Task ExitOnClick()
    {
        //AppDbContext.Entry(AcademicProgram).Reload();
        ToastService.ShowInfo("لم يتم تعديل اي بيانات", 3000);
        AppDbContext.ChangeTracker.Clear();
        await OnDone.InvokeAsync();
    }

    private async Task OnSaveClick()
    {

        if (Status == "Add")
        {
            Appointment = appointmentInfo.GetDxSchedulerAppointment(Appointment);
            AppDbContext.Appointments.Add(Appointment);
        }
        if (Status == "Edit")
        {
            Appointment = appointmentInfo.GetDxSchedulerAppointment(Appointment);
            AppDbContext.Appointments.Update(Appointment);
        }

        AppDbContext.SaveChanges();

        ToastService.ShowSuccess("تم حفظ البيانات بنجاح", 3000);
        await OnDone.InvokeAsync();
    }

    private class AppointmentInfo
    {
        public string Caption { get; set; }

        public DateTime? StartDate { get; set; }
        public DateTime? StartTime { get; set; }
        public DateTime? EndtDate { get; set; }
        public DateTime? EndTime { get; set; }
        public DateTime? RecurrenceEndDate { get; set; }

        public string RepeatPeriod { get; set; } = "0"; // no repeat , day , week, month

        public int RepeatedEvery { get; set; } = 1; // 

        public string WeekDay { get; set; } = "1";

        public string MonthDay { get; set; } = "1";

        public IEnumerable<Resource> Resources { get; set; } = Array.Empty<Resource>();

        public Appointment GetDxSchedulerAppointment(Appointment _appointment)
        {
            Appointment appointment = _appointment;
            DxSchedulerRecurrenceInfo recurrenceInfo;

            appointment.Caption = this.Caption;

            appointment.StartDate = new DateTime(this.StartDate.GetValueOrDefault().Year, this.StartDate.GetValueOrDefault().Month, this.StartDate.GetValueOrDefault().Day, this.StartTime.GetValueOrDefault().Hour, this.StartTime.GetValueOrDefault().Minute,0);
            appointment.EndDate = new DateTime(this.StartDate.GetValueOrDefault().Year, this.StartDate.GetValueOrDefault().Month, this.StartDate.GetValueOrDefault().Day, this.EndTime.GetValueOrDefault().Hour, this.EndTime.GetValueOrDefault().Minute, 0);
            appointment.AppointmentType = (int)SchedulerAppointmentType.OneTime;
            appointment.Status = 2;
            if (int.Parse(this.RepeatPeriod) > 0)
            {
                appointment.AppointmentType = (int)SchedulerAppointmentType.Pattern;
                recurrenceInfo = new DxSchedulerRecurrenceInfo();
                recurrenceInfo.Id = Guid.NewGuid();
                recurrenceInfo.Start = appointment.StartDate;
                if (this.RecurrenceEndDate == null)
                {
                    recurrenceInfo.Range = SchedulerRecurrenceRange.NoEndDate;
                }
                else
                {
                    recurrenceInfo.Range = SchedulerRecurrenceRange.EndByDate;
                    recurrenceInfo.End = this.RecurrenceEndDate.GetValueOrDefault();
                    if (int.Parse(this.RepeatPeriod) == 1)
                    {
                        recurrenceInfo.Type = SchedulerRecurrenceType.Daily;
                    }
                    if (int.Parse(this.RepeatPeriod) == 2)
                    {
                        recurrenceInfo.Type = SchedulerRecurrenceType.Weekly;
                        recurrenceInfo.Frequency = this.RepeatedEvery;
                        recurrenceInfo.WeekDays = (SchedulerWeekDays)int.Parse(this.WeekDay);
                    }
                    if (int.Parse(this.RepeatPeriod) == 3)
                    {
                        recurrenceInfo.Type = SchedulerRecurrenceType.Monthly;
                        recurrenceInfo.DayNumber = int.Parse(this.MonthDay);
                        recurrenceInfo.Frequency = this.RepeatedEvery;
                    }
                }
                appointment.Recurrence = recurrenceInfo.ToXml();
            }
            if (this.Resources != null && this.Resources.Count() > 0)
            {
                var resources = this.Resources.Select(r => r.Id).ToArray();
                appointment.Resources = DxSchedulerResourceIdCollection.ToXml(resources);
            }

            return appointment;
        }

        public void SetAppointmentInfo(Appointment _appointment, List<Resource> resources)
        {
            this.Caption = _appointment.Caption;
            this.StartDate = _appointment.StartDate;
            this.StartTime = _appointment.StartDate;
            this.EndTime = _appointment.EndDate;
            var res = DxSchedulerResourceIdCollection.FromXml(_appointment.Resources).Select(r=> (int)r).ToArray();
            this.Resources = resources.Where(r => res.Contains(r.Id));
            if (_appointment.Recurrence != null)
            {
                DxSchedulerRecurrenceInfo recurrenceInfo = new DxSchedulerRecurrenceInfo();
                recurrenceInfo.FromXml(_appointment.Recurrence);
                if (recurrenceInfo.Type == SchedulerRecurrenceType.Daily)
                {
                    this.RepeatPeriod = "1";
                }
                if (recurrenceInfo.Type == SchedulerRecurrenceType.Weekly)
                {
                    this.RepeatPeriod = "2";
                    this.RepeatedEvery = recurrenceInfo.Frequency;
                    this.WeekDay = ((int)recurrenceInfo.WeekDays).ToString();
                }
                if (recurrenceInfo.Type == SchedulerRecurrenceType.Monthly)
                {
                    this.RepeatPeriod = "3";
                    this.RepeatedEvery = recurrenceInfo.Frequency;
                    this.MonthDay = recurrenceInfo.DayNumber.ToString();
                }
                if (recurrenceInfo.Range == SchedulerRecurrenceRange.EndByDate)
                {
                    this.RecurrenceEndDate = recurrenceInfo.End;
                }
            }
            else
            {
                this.RepeatPeriod = "0";
            }
        }
    }
}


