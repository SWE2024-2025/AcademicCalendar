@using Microsoft.EntityFrameworkCore
@using AcademicYearCalendar.Data
@inject AppDbContext AppDbContext
@rendermode InteractiveServer
@inject IMessageService MessageService

<h3>اضافة/تعديل برنامج دراسي</h3>



<FluentGrid>
    <FluentGridItem xs="12" sm="6">
        <EditForm Model="program" FormName="change-academicProgram" OnValidSubmit="OnValidSubmitAsync" method="post" novalidate>
            <DataAnnotationsValidator />
            <FluentValidationSummary class="text-danger" role="alert" />
            <FluentTextField Name="program.ProgramName" @bind-Value="program.ProgramName" Required="true" Placeholder="ادخل اسم البرنامج الدراسي" Label="اسم البرنامج الدراسي" Style="width: 100%" />
            <FluentValidationMessage For="() => program.ProgramName" class="text-danger" />
            <div style="display:flex">
                <FluentSpacer />
                <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size16.Save())" Style="width: 25%;">حفظ</FluentButton>
                <FluentSpacer />
                <FluentButton Type="ButtonType.Button" @onclick="ExitOnClick" Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size16.RecordStop())" Style="width: 25%;">رجوع</FluentButton>
                <FluentSpacer />
            </div>
        </EditForm>
        

    </FluentGridItem>
</FluentGrid>


@code {
    [Parameter]
    public AcademicProgram AcademicProgram { get; set; }

    private AcademicProgram program { get; set; }

    

    [Parameter]
    public string Status { get; set; }

    [Parameter]
    public EventCallback OnDone { get; set; }

    protected override void OnInitialized()
    {
        program = new AcademicProgram();
        if (Status == "Edit")
        {
            program.Id = AcademicProgram.Id;
            program.ProgramName = AcademicProgram.ProgramName;
        }
    }

    async Task ExitOnClick()
    {
        //AppDbContext.Entry(AcademicProgram).Reload();
        MessageService.ShowMessageBar(options =>
        {
            options.Intent = MessageIntent.Warning;
            options.Body = "لم يتم تعديل اي بيانات";
            options.Timeout = 3000;
            options.Section = "MESSAGES_TOP";
        });
        AppDbContext.ChangeTracker.Clear();
        await OnDone.InvokeAsync();
    }

    private async Task OnValidSubmitAsync()
    {
        // if (Input.NewEmail is null || Input.NewEmail == email)
        // {
        //     message = "لم يتم تغيير البريد الالكتروني";
        //     return;
        // }

        if (Status == "Add")
        {
            program.Id = AppDbContext.GetNextResourceId();
            AppDbContext.AcademicProgram.Add(program);
        }
        if (Status == "Edit")
        {
            AcademicProgram.ProgramName = program.ProgramName;
            AppDbContext.AcademicProgram.Update(AcademicProgram);
        }
        await AppDbContext.SaveChangesAsync();
        await OnDone.InvokeAsync();

        //await MessageService.ShowMessageBarAsync("تم حفظ البيانات بنجاح", MessageIntent.Success, "MESSAGES_TOP");
        MessageService.ShowMessageBar(options =>
        {
            options.Intent = MessageIntent.Success;
            options.Body = "تم حفظ البيانات بنجاح";
            options.Timeout = 3000;
            options.Section = "MESSAGES_TOP";
        });
        //message = "تم تحديث البريد الالكتروني";
    }

    
}
